<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="33"><g><title>[[stack]] (1 samples, 3.03%)</title><rect x="0.0000%" y="789" width="3.0303%" height="15" fill="rgb(175,175,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50">[[s..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 3.03%)</title><rect x="0.0000%" y="773" width="3.0303%" height="15" fill="rgb(190,90,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50">cor..</text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 9.09%)</title><rect x="3.0303%" y="789" width="9.0909%" height="15" fill="rgb(221,221,66)" fg:x="1" fg:w="3"/><text x="3.2803%" y="799.50">[ld-linux-x86..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 3.03%)</title><rect x="9.0909%" y="773" width="3.0303%" height="15" fill="rgb(225,225,68)" fg:x="3" fg:w="1"/><text x="9.3409%" y="783.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 3.03%)</title><rect x="9.0909%" y="757" width="3.0303%" height="15" fill="rgb(191,191,55)" fg:x="3" fg:w="1"/><text x="9.3409%" y="767.50">[ld..</text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 3.03%)</title><rect x="9.0909%" y="741" width="3.0303%" height="15" fill="rgb(205,205,61)" fg:x="3" fg:w="1"/><text x="9.3409%" y="751.50">[ld..</text></g><g><title>[unknown] (5 samples, 15.15%)</title><rect x="12.1212%" y="789" width="15.1515%" height="15" fill="rgb(213,213,63)" fg:x="4" fg:w="5"/><text x="12.3712%" y="799.50">[unknown]</text></g><g><title>alc::text_processor::keycode::Keycode::from_string (1 samples, 3.03%)</title><rect x="24.2424%" y="773" width="3.0303%" height="15" fill="rgb(56,170,170)" fg:x="8" fg:w="1"/><text x="24.4924%" y="783.50">alc..</text></g><g><title>alc::text_processor::keycode::Keycode::from_char (1 samples, 3.03%)</title><rect x="24.2424%" y="757" width="3.0303%" height="15" fill="rgb(58,172,172)" fg:x="8" fg:w="1"/><text x="24.4924%" y="767.50">alc..</text></g><g><title>alloc::fmt::format (1 samples, 3.03%)</title><rect x="24.2424%" y="741" width="3.0303%" height="15" fill="rgb(224,124,0)" fg:x="8" fg:w="1"/><text x="24.4924%" y="751.50">all..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 3.03%)</title><rect x="24.2424%" y="725" width="3.0303%" height="15" fill="rgb(254,154,0)" fg:x="8" fg:w="1"/><text x="24.4924%" y="735.50">cor..</text></g><g><title>alloc::fmt::format::_{{closure}} (1 samples, 3.03%)</title><rect x="24.2424%" y="709" width="3.0303%" height="15" fill="rgb(244,144,0)" fg:x="8" fg:w="1"/><text x="24.4924%" y="719.50">all..</text></g><g><title>&lt;alc::optimizer::LayoutOptimizer&lt;4_usize,12_usize,T&gt; as core::default::Default&gt;::default (1 samples, 3.03%)</title><rect x="27.2727%" y="517" width="3.0303%" height="15" fill="rgb(55,169,169)" fg:x="9" fg:w="1"/><text x="27.5227%" y="527.50">&lt;al..</text></g><g><title>alc::keyboard::default_layouts::&lt;impl core::default::Default for alc::keyboard::layout::Layout&lt;4_usize,12_usize&gt;&gt;::default (1 samples, 3.03%)</title><rect x="27.2727%" y="501" width="3.0303%" height="15" fill="rgb(99,209,209)" fg:x="9" fg:w="1"/><text x="27.5227%" y="511.50">alc..</text></g><g><title>&lt;alc::keyboard::layout::Layout&lt;_,_&gt; as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (1 samples, 3.03%)</title><rect x="27.2727%" y="485" width="3.0303%" height="15" fill="rgb(104,214,214)" fg:x="9" fg:w="1"/><text x="27.5227%" y="495.50">&lt;al..</text></g><g><title>alc::keyboard::layout::Layout&lt;_,_&gt;::generate_pathmap (1 samples, 3.03%)</title><rect x="27.2727%" y="469" width="3.0303%" height="15" fill="rgb(69,182,182)" fg:x="9" fg:w="1"/><text x="27.5227%" y="479.50">alc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 3.03%)</title><rect x="27.2727%" y="453" width="3.0303%" height="15" fill="rgb(195,95,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="463.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 3.03%)</title><rect x="27.2727%" y="437" width="3.0303%" height="15" fill="rgb(198,98,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="447.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 3.03%)</title><rect x="27.2727%" y="421" width="3.0303%" height="15" fill="rgb(246,146,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="431.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 3.03%)</title><rect x="27.2727%" y="405" width="3.0303%" height="15" fill="rgb(197,97,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="415.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 3.03%)</title><rect x="27.2727%" y="389" width="3.0303%" height="15" fill="rgb(199,99,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="399.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 3.03%)</title><rect x="27.2727%" y="373" width="3.0303%" height="15" fill="rgb(241,141,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="383.50">all..</text></g><g><title>alloc::alloc::realloc (1 samples, 3.03%)</title><rect x="27.2727%" y="357" width="3.0303%" height="15" fill="rgb(191,91,0)" fg:x="9" fg:w="1"/><text x="27.5227%" y="367.50">all..</text></g><g><title>realloc (1 samples, 3.03%)</title><rect x="27.2727%" y="341" width="3.0303%" height="15" fill="rgb(179,179,51)" fg:x="9" fg:w="1"/><text x="27.5227%" y="351.50">rea..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="27.2727%" y="325" width="3.0303%" height="15" fill="rgb(206,206,61)" fg:x="9" fg:w="1"/><text x="27.5227%" y="335.50">[li..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="27.2727%" y="309" width="3.0303%" height="15" fill="rgb(182,182,52)" fg:x="9" fg:w="1"/><text x="27.5227%" y="319.50">[li..</text></g><g><title>alloc::fmt::format (1 samples, 3.03%)</title><rect x="30.3030%" y="229" width="3.0303%" height="15" fill="rgb(221,121,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="239.50">all..</text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 3.03%)</title><rect x="30.3030%" y="213" width="3.0303%" height="15" fill="rgb(235,135,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="223.50">cor..</text></g><g><title>alloc::fmt::format::_{{closure}} (1 samples, 3.03%)</title><rect x="30.3030%" y="197" width="3.0303%" height="15" fill="rgb(231,131,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="207.50">all..</text></g><g><title>alloc::fmt::format::format_inner (1 samples, 3.03%)</title><rect x="30.3030%" y="181" width="3.0303%" height="15" fill="rgb(200,100,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="191.50">all..</text></g><g><title>core::fmt::Write::write_fmt (1 samples, 3.03%)</title><rect x="30.3030%" y="165" width="3.0303%" height="15" fill="rgb(219,119,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="175.50">cor..</text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 3.03%)</title><rect x="30.3030%" y="149" width="3.0303%" height="15" fill="rgb(73,186,186)" fg:x="10" fg:w="1"/><text x="30.5530%" y="159.50">&lt;&amp;m..</text></g><g><title>core::fmt::write (1 samples, 3.03%)</title><rect x="30.3030%" y="133" width="3.0303%" height="15" fill="rgb(241,141,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="143.50">cor..</text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 3.03%)</title><rect x="30.3030%" y="117" width="3.0303%" height="15" fill="rgb(244,144,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="127.50">cor..</text></g><g><title>&lt;core::char::ToLowercase as core::fmt::Display&gt;::fmt (1 samples, 3.03%)</title><rect x="30.3030%" y="101" width="3.0303%" height="15" fill="rgb(213,113,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="111.50">&lt;co..</text></g><g><title>&lt;core::char::CaseMappingIter as core::fmt::Display&gt;::fmt (1 samples, 3.03%)</title><rect x="30.3030%" y="85" width="3.0303%" height="15" fill="rgb(200,100,0)" fg:x="10" fg:w="1"/><text x="30.5530%" y="95.50">&lt;co..</text></g><g><title>alc::text_processor::keycode::Keycode::from_string (2 samples, 6.06%)</title><rect x="30.3030%" y="261" width="6.0606%" height="15" fill="rgb(50,165,165)" fg:x="10" fg:w="2"/><text x="30.5530%" y="271.50">alc::tex..</text></g><g><title>alc::text_processor::keycode::Keycode::from_char (2 samples, 6.06%)</title><rect x="30.3030%" y="245" width="6.0606%" height="15" fill="rgb(100,211,211)" fg:x="10" fg:w="2"/><text x="30.5530%" y="255.50">alc::tex..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alc::text_processor::keycode::Keycode&gt;&gt; (1 samples, 3.03%)</title><rect x="33.3333%" y="229" width="3.0303%" height="15" fill="rgb(237,137,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="239.50">cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.03%)</title><rect x="33.3333%" y="213" width="3.0303%" height="15" fill="rgb(241,141,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="223.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alc::text_processor::keycode::Keycode,alloc::alloc::Global&gt;&gt; (1 samples, 3.03%)</title><rect x="33.3333%" y="197" width="3.0303%" height="15" fill="rgb(207,107,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="207.50">cor..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.03%)</title><rect x="33.3333%" y="181" width="3.0303%" height="15" fill="rgb(68,181,181)" fg:x="11" fg:w="1"/><text x="33.5833%" y="191.50">&lt;&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alc::text_processor::keycode::Keycode&gt;&gt; (1 samples, 3.03%)</title><rect x="33.3333%" y="165" width="3.0303%" height="15" fill="rgb(216,116,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="175.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.03%)</title><rect x="33.3333%" y="149" width="3.0303%" height="15" fill="rgb(222,122,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="159.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 3.03%)</title><rect x="33.3333%" y="133" width="3.0303%" height="15" fill="rgb(248,148,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="143.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1 samples, 3.03%)</title><rect x="33.3333%" y="117" width="3.0303%" height="15" fill="rgb(217,117,0)" fg:x="11" fg:w="1"/><text x="33.5833%" y="127.50">all..</text></g><g><title>cfree (1 samples, 3.03%)</title><rect x="33.3333%" y="101" width="3.0303%" height="15" fill="rgb(208,208,62)" fg:x="11" fg:w="1"/><text x="33.5833%" y="111.50">cfr..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="33.3333%" y="85" width="3.0303%" height="15" fill="rgb(220,220,66)" fg:x="11" fg:w="1"/><text x="33.5833%" y="95.50">[li..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 3.03%)</title><rect x="36.3636%" y="229" width="3.0303%" height="15" fill="rgb(65,179,179)" fg:x="12" fg:w="1"/><text x="36.6136%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.03%)</title><rect x="36.3636%" y="213" width="3.0303%" height="15" fill="rgb(57,171,171)" fg:x="12" fg:w="1"/><text x="36.6136%" y="223.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.03%)</title><rect x="36.3636%" y="197" width="3.0303%" height="15" fill="rgb(59,173,173)" fg:x="12" fg:w="1"/><text x="36.6136%" y="207.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.03%)</title><rect x="36.3636%" y="181" width="3.0303%" height="15" fill="rgb(105,216,216)" fg:x="12" fg:w="1"/><text x="36.6136%" y="191.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.03%)</title><rect x="36.3636%" y="165" width="3.0303%" height="15" fill="rgb(82,194,194)" fg:x="12" fg:w="1"/><text x="36.6136%" y="175.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 3.03%)</title><rect x="36.3636%" y="149" width="3.0303%" height="15" fill="rgb(86,198,198)" fg:x="12" fg:w="1"/><text x="36.6136%" y="159.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 3.03%)</title><rect x="36.3636%" y="133" width="3.0303%" height="15" fill="rgb(88,199,199)" fg:x="12" fg:w="1"/><text x="36.6136%" y="143.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 3.03%)</title><rect x="36.3636%" y="117" width="3.0303%" height="15" fill="rgb(80,193,193)" fg:x="12" fg:w="1"/><text x="36.6136%" y="127.50">has..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 3.03%)</title><rect x="36.3636%" y="101" width="3.0303%" height="15" fill="rgb(88,200,200)" fg:x="12" fg:w="1"/><text x="36.6136%" y="111.50">has..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 3.03%)</title><rect x="36.3636%" y="85" width="3.0303%" height="15" fill="rgb(213,113,0)" fg:x="12" fg:w="1"/><text x="36.6136%" y="95.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 3.03%)</title><rect x="36.3636%" y="69" width="3.0303%" height="15" fill="rgb(193,93,0)" fg:x="12" fg:w="1"/><text x="36.6136%" y="79.50">all..</text></g><g><title>alloc::alloc::alloc (1 samples, 3.03%)</title><rect x="36.3636%" y="53" width="3.0303%" height="15" fill="rgb(190,90,0)" fg:x="12" fg:w="1"/><text x="36.6136%" y="63.50">all..</text></g><g><title>malloc (1 samples, 3.03%)</title><rect x="36.3636%" y="37" width="3.0303%" height="15" fill="rgb(186,186,54)" fg:x="12" fg:w="1"/><text x="36.6136%" y="47.50">mal..</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::compute_datasets (4 samples, 12.12%)</title><rect x="30.3030%" y="501" width="12.1212%" height="15" fill="rgb(52,167,167)" fg:x="10" fg:w="4"/><text x="30.5530%" y="511.50">alc::optimizer::La..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 12.12%)</title><rect x="30.3030%" y="485" width="12.1212%" height="15" fill="rgb(254,154,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="495.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 12.12%)</title><rect x="30.3030%" y="469" width="12.1212%" height="15" fill="rgb(231,131,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="479.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 12.12%)</title><rect x="30.3030%" y="453" width="12.1212%" height="15" fill="rgb(209,109,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="463.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 12.12%)</title><rect x="30.3030%" y="437" width="12.1212%" height="15" fill="rgb(217,117,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="447.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 12.12%)</title><rect x="30.3030%" y="421" width="12.1212%" height="15" fill="rgb(229,129,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="431.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 12.12%)</title><rect x="30.3030%" y="405" width="12.1212%" height="15" fill="rgb(212,112,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="415.50">alloc::vec::Vec&lt;T,..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 12.12%)</title><rect x="30.3030%" y="389" width="12.1212%" height="15" fill="rgb(240,140,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="399.50">core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 12.12%)</title><rect x="30.3030%" y="373" width="12.1212%" height="15" fill="rgb(207,107,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="383.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 12.12%)</title><rect x="30.3030%" y="357" width="12.1212%" height="15" fill="rgb(233,133,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="367.50">&lt;core::slice::iter..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 12.12%)</title><rect x="30.3030%" y="341" width="12.1212%" height="15" fill="rgb(200,100,0)" fg:x="10" fg:w="4"/><text x="30.5530%" y="351.50">core::iter::adapte..</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::compute_datasets::_{{closure}} (4 samples, 12.12%)</title><rect x="30.3030%" y="325" width="12.1212%" height="15" fill="rgb(80,192,192)" fg:x="10" fg:w="4"/><text x="30.5530%" y="335.50">alc::optimizer::La..</text></g><g><title>alc::text_processor::dataset::FrequencyDataset&lt;u32&gt;::try_from_dir (4 samples, 12.12%)</title><rect x="30.3030%" y="309" width="12.1212%" height="15" fill="rgb(64,177,177)" fg:x="10" fg:w="4"/><text x="30.5530%" y="319.50">alc::text_processo..</text></g><g><title>alc::text_processor::frequency_holder::SingleGramFrequencies&lt;u32&gt;::try_from_file (4 samples, 12.12%)</title><rect x="30.3030%" y="293" width="12.1212%" height="15" fill="rgb(71,185,185)" fg:x="10" fg:w="4"/><text x="30.5530%" y="303.50">alc::text_processo..</text></g><g><title>alc::text_processor::frequency_holder::SingleGramFrequencies&lt;u32&gt;::try_from_string (4 samples, 12.12%)</title><rect x="30.3030%" y="277" width="12.1212%" height="15" fill="rgb(80,193,193)" fg:x="10" fg:w="4"/><text x="30.5530%" y="287.50">alc::text_processo..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2 samples, 6.06%)</title><rect x="36.3636%" y="261" width="6.0606%" height="15" fill="rgb(202,102,0)" fg:x="12" fg:w="2"/><text x="36.6136%" y="271.50">std::col..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 6.06%)</title><rect x="36.3636%" y="245" width="6.0606%" height="15" fill="rgb(59,174,174)" fg:x="12" fg:w="2"/><text x="36.6136%" y="255.50">hashbrow..</text></g><g><title>hashbrown::map::make_hash (1 samples, 3.03%)</title><rect x="39.3939%" y="229" width="3.0303%" height="15" fill="rgb(105,215,215)" fg:x="13" fg:w="1"/><text x="39.6439%" y="239.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 3.03%)</title><rect x="39.3939%" y="213" width="3.0303%" height="15" fill="rgb(212,112,0)" fg:x="13" fg:w="1"/><text x="39.6439%" y="223.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 3.03%)</title><rect x="39.3939%" y="197" width="3.0303%" height="15" fill="rgb(217,117,0)" fg:x="13" fg:w="1"/><text x="39.6439%" y="207.50">cor..</text></g><g><title>&lt;alc::text_processor::ngram::Ngram as core::hash::Hash&gt;::hash (1 samples, 3.03%)</title><rect x="39.3939%" y="181" width="3.0303%" height="15" fill="rgb(106,216,216)" fg:x="13" fg:w="1"/><text x="39.6439%" y="191.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 3.03%)</title><rect x="39.3939%" y="165" width="3.0303%" height="15" fill="rgb(213,113,0)" fg:x="13" fg:w="1"/><text x="39.6439%" y="175.50">&lt;al..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 3.03%)</title><rect x="39.3939%" y="149" width="3.0303%" height="15" fill="rgb(243,143,0)" fg:x="13" fg:w="1"/><text x="39.6439%" y="159.50">cor..</text></g><g><title>core::hash::Hash::hash_slice (1 samples, 3.03%)</title><rect x="39.3939%" y="133" width="3.0303%" height="15" fill="rgb(250,150,0)" fg:x="13" fg:w="1"/><text x="39.6439%" y="143.50">cor..</text></g><g><title>&lt;alc::text_processor::keycode::Keycode as core::hash::Hash&gt;::hash (1 samples, 3.03%)</title><rect x="39.3939%" y="117" width="3.0303%" height="15" fill="rgb(81,194,194)" fg:x="13" fg:w="1"/><text x="39.6439%" y="127.50">&lt;al..</text></g><g><title>&lt;alc::objective::scoring::AdvancedScoreFunction as alc::objective::scoring::Score&lt;_,_&gt;&gt;::score_layout_position_sequence (5 samples, 15.15%)</title><rect x="42.4242%" y="453" width="15.1515%" height="15" fill="rgb(107,217,217)" fg:x="14" fg:w="5"/><text x="42.6742%" y="463.50">&lt;alc::objective::scorin..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 3.03%)</title><rect x="54.5455%" y="437" width="3.0303%" height="15" fill="rgb(209,109,0)" fg:x="18" fg:w="1"/><text x="54.7955%" y="447.50">all..</text></g><g><title>core::ptr::write (1 samples, 3.03%)</title><rect x="54.5455%" y="421" width="3.0303%" height="15" fill="rgb(194,94,0)" fg:x="18" fg:w="1"/><text x="54.7955%" y="431.50">cor..</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::generate_and_score_initial_population (6 samples, 18.18%)</title><rect x="42.4242%" y="501" width="18.1818%" height="15" fill="rgb(82,194,194)" fg:x="14" fg:w="6"/><text x="42.6742%" y="511.50">alc::optimizer::LayoutOptimi..</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_datasets (6 samples, 18.18%)</title><rect x="42.4242%" y="485" width="18.1818%" height="15" fill="rgb(94,205,205)" fg:x="14" fg:w="6"/><text x="42.6742%" y="495.50">alc::optimizer::LayoutOptimi..</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_single_grams (6 samples, 18.18%)</title><rect x="42.4242%" y="469" width="18.1818%" height="15" fill="rgb(93,204,204)" fg:x="14" fg:w="6"/><text x="42.6742%" y="479.50">alc::optimizer::LayoutOptimi..</text></g><g><title>alc::keyboard::layout::Layout&lt;_,_&gt;::ngram_to_sequences (1 samples, 3.03%)</title><rect x="57.5758%" y="453" width="3.0303%" height="15" fill="rgb(106,216,216)" fg:x="19" fg:w="1"/><text x="57.8258%" y="463.50">alc..</text></g><g><title>alc::keyboard::LayoutPositionSequence::append (1 samples, 3.03%)</title><rect x="57.5758%" y="437" width="3.0303%" height="15" fill="rgb(80,192,192)" fg:x="19" fg:w="1"/><text x="57.8258%" y="447.50">alc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 3.03%)</title><rect x="57.5758%" y="421" width="3.0303%" height="15" fill="rgb(218,118,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="431.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 3.03%)</title><rect x="57.5758%" y="405" width="3.0303%" height="15" fill="rgb(193,93,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="415.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 3.03%)</title><rect x="57.5758%" y="389" width="3.0303%" height="15" fill="rgb(230,130,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="399.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 3.03%)</title><rect x="57.5758%" y="373" width="3.0303%" height="15" fill="rgb(217,117,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="383.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 3.03%)</title><rect x="57.5758%" y="357" width="3.0303%" height="15" fill="rgb(248,148,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="367.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 3.03%)</title><rect x="57.5758%" y="341" width="3.0303%" height="15" fill="rgb(236,136,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="351.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 3.03%)</title><rect x="57.5758%" y="325" width="3.0303%" height="15" fill="rgb(226,126,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="335.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 3.03%)</title><rect x="57.5758%" y="309" width="3.0303%" height="15" fill="rgb(195,95,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="319.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 3.03%)</title><rect x="57.5758%" y="293" width="3.0303%" height="15" fill="rgb(220,120,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="303.50">all..</text></g><g><title>alloc::alloc::realloc (1 samples, 3.03%)</title><rect x="57.5758%" y="277" width="3.0303%" height="15" fill="rgb(198,98,0)" fg:x="19" fg:w="1"/><text x="57.8258%" y="287.50">all..</text></g><g><title>realloc (1 samples, 3.03%)</title><rect x="57.5758%" y="261" width="3.0303%" height="15" fill="rgb(228,228,69)" fg:x="19" fg:w="1"/><text x="57.8258%" y="271.50">rea..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="57.5758%" y="245" width="3.0303%" height="15" fill="rgb(180,180,51)" fg:x="19" fg:w="1"/><text x="57.8258%" y="255.50">[li..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="57.5758%" y="229" width="3.0303%" height="15" fill="rgb(180,180,52)" fg:x="19" fg:w="1"/><text x="57.8258%" y="239.50">[li..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 15.15%)</title><rect x="66.6667%" y="437" width="15.1515%" height="15" fill="rgb(191,91,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="447.50">alloc::vec::Vec&lt;T,A&gt;::p..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 15.15%)</title><rect x="66.6667%" y="421" width="15.1515%" height="15" fill="rgb(213,113,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="431.50">alloc::raw_vec::RawVec&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 15.15%)</title><rect x="66.6667%" y="405" width="15.1515%" height="15" fill="rgb(210,110,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="415.50">alloc::raw_vec::RawVec&lt;..</text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 15.15%)</title><rect x="66.6667%" y="389" width="15.1515%" height="15" fill="rgb(209,109,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="399.50">alloc::raw_vec::finish_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 15.15%)</title><rect x="66.6667%" y="373" width="15.1515%" height="15" fill="rgb(243,143,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="383.50">&lt;alloc::alloc::Global a..</text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 15.15%)</title><rect x="66.6667%" y="357" width="15.1515%" height="15" fill="rgb(222,122,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="367.50">alloc::alloc::Global::g..</text></g><g><title>alloc::alloc::realloc (5 samples, 15.15%)</title><rect x="66.6667%" y="341" width="15.1515%" height="15" fill="rgb(244,144,0)" fg:x="22" fg:w="5"/><text x="66.9167%" y="351.50">alloc::alloc::realloc</text></g><g><title>realloc (5 samples, 15.15%)</title><rect x="66.6667%" y="325" width="15.1515%" height="15" fill="rgb(200,200,59)" fg:x="22" fg:w="5"/><text x="66.9167%" y="335.50">realloc</text></g><g><title>[libc.so.6] (5 samples, 15.15%)</title><rect x="66.6667%" y="309" width="15.1515%" height="15" fill="rgb(216,216,65)" fg:x="22" fg:w="5"/><text x="66.9167%" y="319.50">[libc.so.6]</text></g><g><title>[libc.so.6] (5 samples, 15.15%)</title><rect x="66.6667%" y="293" width="15.1515%" height="15" fill="rgb(202,202,59)" fg:x="22" fg:w="5"/><text x="66.9167%" y="303.50">[libc.so.6]</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 3.03%)</title><rect x="81.8182%" y="437" width="3.0303%" height="15" fill="rgb(235,135,0)" fg:x="27" fg:w="1"/><text x="82.0682%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 3.03%)</title><rect x="81.8182%" y="421" width="3.0303%" height="15" fill="rgb(238,138,0)" fg:x="27" fg:w="1"/><text x="82.0682%" y="431.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 3.03%)</title><rect x="81.8182%" y="405" width="3.0303%" height="15" fill="rgb(196,96,0)" fg:x="27" fg:w="1"/><text x="82.0682%" y="415.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 3.03%)</title><rect x="81.8182%" y="389" width="3.0303%" height="15" fill="rgb(223,123,0)" fg:x="27" fg:w="1"/><text x="82.0682%" y="399.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1 samples, 3.03%)</title><rect x="81.8182%" y="373" width="3.0303%" height="15" fill="rgb(210,110,0)" fg:x="27" fg:w="1"/><text x="82.0682%" y="383.50">all..</text></g><g><title>cfree (1 samples, 3.03%)</title><rect x="81.8182%" y="357" width="3.0303%" height="15" fill="rgb(191,191,56)" fg:x="27" fg:w="1"/><text x="82.0682%" y="367.50">cfr..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="81.8182%" y="341" width="3.0303%" height="15" fill="rgb(205,205,60)" fg:x="27" fg:w="1"/><text x="82.0682%" y="351.50">[li..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 3.03%)</title><rect x="84.8485%" y="325" width="3.0303%" height="15" fill="rgb(200,100,0)" fg:x="28" fg:w="1"/><text x="85.0985%" y="335.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (1 samples, 3.03%)</title><rect x="84.8485%" y="309" width="3.0303%" height="15" fill="rgb(224,124,0)" fg:x="28" fg:w="1"/><text x="85.0985%" y="319.50">all..</text></g><g><title>__rdl_dealloc (1 samples, 3.03%)</title><rect x="84.8485%" y="293" width="3.0303%" height="15" fill="rgb(178,178,51)" fg:x="28" fg:w="1"/><text x="85.0985%" y="303.50">__r..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 3.03%)</title><rect x="84.8485%" y="277" width="3.0303%" height="15" fill="rgb(227,127,0)" fg:x="28" fg:w="1"/><text x="85.0985%" y="287.50">std..</text></g><g><title>&lt;alc::objective::scoring::AdvancedScoreFunction as alc::objective::scoring::Score&lt;_,_&gt;&gt;::score_layout_position_sequence (11 samples, 33.33%)</title><rect x="60.6061%" y="453" width="33.3333%" height="15" fill="rgb(63,176,176)" fg:x="20" fg:w="11"/><text x="60.8561%" y="463.50">&lt;alc::objective::scoring::AdvancedScoreFunction as alc..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::enumerate::Enumerate&lt;alloc::vec::into_iter::IntoIter&lt;alc::keyboard::LayoutPosition&gt;&gt;&gt; (3 samples, 9.09%)</title><rect x="84.8485%" y="437" width="9.0909%" height="15" fill="rgb(241,141,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="447.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alc::keyboard::LayoutPosition&gt;&gt; (3 samples, 9.09%)</title><rect x="84.8485%" y="421" width="9.0909%" height="15" fill="rgb(194,94,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="431.50">core::ptr::dr..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 9.09%)</title><rect x="84.8485%" y="405" width="9.0909%" height="15" fill="rgb(254,154,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="415.50">&lt;alloc::vec::..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alc::keyboard::LayoutPosition,alloc::alloc::Global&gt;&gt; (3 samples, 9.09%)</title><rect x="84.8485%" y="389" width="9.0909%" height="15" fill="rgb(205,105,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="399.50">core::ptr::dr..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 9.09%)</title><rect x="84.8485%" y="373" width="9.0909%" height="15" fill="rgb(52,167,167)" fg:x="28" fg:w="3"/><text x="85.0985%" y="383.50">&lt;&lt;alloc::vec:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alc::keyboard::LayoutPosition&gt;&gt; (3 samples, 9.09%)</title><rect x="84.8485%" y="357" width="9.0909%" height="15" fill="rgb(206,106,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="367.50">core::ptr::dr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 9.09%)</title><rect x="84.8485%" y="341" width="9.0909%" height="15" fill="rgb(224,124,0)" fg:x="28" fg:w="3"/><text x="85.0985%" y="351.50">&lt;alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 6.06%)</title><rect x="87.8788%" y="325" width="6.0606%" height="15" fill="rgb(221,121,0)" fg:x="29" fg:w="2"/><text x="88.1288%" y="335.50">alloc::r..</text></g><g><title>alc::keyboard::layout::Layout&lt;_,_&gt;::ngram_to_sequences (1 samples, 3.03%)</title><rect x="93.9394%" y="453" width="3.0303%" height="15" fill="rgb(54,169,169)" fg:x="31" fg:w="1"/><text x="94.1894%" y="463.50">alc..</text></g><g><title>alc::keyboard::LayoutPositionSequence::append (1 samples, 3.03%)</title><rect x="93.9394%" y="437" width="3.0303%" height="15" fill="rgb(60,174,174)" fg:x="31" fg:w="1"/><text x="94.1894%" y="447.50">alc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (1 samples, 3.03%)</title><rect x="93.9394%" y="421" width="3.0303%" height="15" fill="rgb(224,124,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="431.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 3.03%)</title><rect x="93.9394%" y="405" width="3.0303%" height="15" fill="rgb(225,125,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="415.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 3.03%)</title><rect x="93.9394%" y="389" width="3.0303%" height="15" fill="rgb(217,117,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="399.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 3.03%)</title><rect x="93.9394%" y="373" width="3.0303%" height="15" fill="rgb(242,142,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="383.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 3.03%)</title><rect x="93.9394%" y="357" width="3.0303%" height="15" fill="rgb(248,148,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="367.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 3.03%)</title><rect x="93.9394%" y="341" width="3.0303%" height="15" fill="rgb(246,146,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="351.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 3.03%)</title><rect x="93.9394%" y="325" width="3.0303%" height="15" fill="rgb(246,146,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="335.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 3.03%)</title><rect x="93.9394%" y="309" width="3.0303%" height="15" fill="rgb(203,103,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="319.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 3.03%)</title><rect x="93.9394%" y="293" width="3.0303%" height="15" fill="rgb(199,99,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="303.50">all..</text></g><g><title>alloc::alloc::realloc (1 samples, 3.03%)</title><rect x="93.9394%" y="277" width="3.0303%" height="15" fill="rgb(199,99,0)" fg:x="31" fg:w="1"/><text x="94.1894%" y="287.50">all..</text></g><g><title>realloc (1 samples, 3.03%)</title><rect x="93.9394%" y="261" width="3.0303%" height="15" fill="rgb(223,223,67)" fg:x="31" fg:w="1"/><text x="94.1894%" y="271.50">rea..</text></g><g><title>all (33 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(199,199,58)" fg:x="0" fg:w="33"/><text x="0.2500%" y="831.50"></text></g><g><title>alc (33 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(201,201,59)" fg:x="0" fg:w="33"/><text x="0.2500%" y="815.50">alc</text></g><g><title>_start (24 samples, 72.73%)</title><rect x="27.2727%" y="789" width="72.7273%" height="15" fill="rgb(192,192,56)" fg:x="9" fg:w="24"/><text x="27.5227%" y="799.50">_start</text></g><g><title>__libc_start_main (24 samples, 72.73%)</title><rect x="27.2727%" y="773" width="72.7273%" height="15" fill="rgb(198,198,58)" fg:x="9" fg:w="24"/><text x="27.5227%" y="783.50">__libc_start_main</text></g><g><title>[libc.so.6] (24 samples, 72.73%)</title><rect x="27.2727%" y="757" width="72.7273%" height="15" fill="rgb(180,180,51)" fg:x="9" fg:w="24"/><text x="27.5227%" y="767.50">[libc.so.6]</text></g><g><title>main (24 samples, 72.73%)</title><rect x="27.2727%" y="741" width="72.7273%" height="15" fill="rgb(214,214,64)" fg:x="9" fg:w="24"/><text x="27.5227%" y="751.50">main</text></g><g><title>std::rt::lang_start_internal (24 samples, 72.73%)</title><rect x="27.2727%" y="725" width="72.7273%" height="15" fill="rgb(197,97,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="735.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (24 samples, 72.73%)</title><rect x="27.2727%" y="709" width="72.7273%" height="15" fill="rgb(219,119,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24 samples, 72.73%)</title><rect x="27.2727%" y="693" width="72.7273%" height="15" fill="rgb(201,101,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24 samples, 72.73%)</title><rect x="27.2727%" y="677" width="72.7273%" height="15" fill="rgb(209,109,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="687.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (24 samples, 72.73%)</title><rect x="27.2727%" y="661" width="72.7273%" height="15" fill="rgb(192,92,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="671.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (24 samples, 72.73%)</title><rect x="27.2727%" y="645" width="72.7273%" height="15" fill="rgb(195,95,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (24 samples, 72.73%)</title><rect x="27.2727%" y="629" width="72.7273%" height="15" fill="rgb(213,113,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (24 samples, 72.73%)</title><rect x="27.2727%" y="613" width="72.7273%" height="15" fill="rgb(197,97,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="623.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (24 samples, 72.73%)</title><rect x="27.2727%" y="597" width="72.7273%" height="15" fill="rgb(242,142,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="607.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (24 samples, 72.73%)</title><rect x="27.2727%" y="581" width="72.7273%" height="15" fill="rgb(239,139,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="591.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 72.73%)</title><rect x="27.2727%" y="565" width="72.7273%" height="15" fill="rgb(246,146,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 72.73%)</title><rect x="27.2727%" y="549" width="72.7273%" height="15" fill="rgb(212,112,0)" fg:x="9" fg:w="24"/><text x="27.5227%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>alc::main (24 samples, 72.73%)</title><rect x="27.2727%" y="533" width="72.7273%" height="15" fill="rgb(83,195,195)" fg:x="9" fg:w="24"/><text x="27.5227%" y="543.50">alc::main</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::optimize (23 samples, 69.70%)</title><rect x="30.3030%" y="517" width="69.6970%" height="15" fill="rgb(62,176,176)" fg:x="10" fg:w="23"/><text x="30.5530%" y="527.50">alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::optimize</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_population (13 samples, 39.39%)</title><rect x="60.6061%" y="501" width="39.3939%" height="15" fill="rgb(67,181,181)" fg:x="20" fg:w="13"/><text x="60.8561%" y="511.50">alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_population</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_datasets (13 samples, 39.39%)</title><rect x="60.6061%" y="485" width="39.3939%" height="15" fill="rgb(71,185,185)" fg:x="20" fg:w="13"/><text x="60.8561%" y="495.50">alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_datasets</text></g><g><title>alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_single_grams (13 samples, 39.39%)</title><rect x="60.6061%" y="469" width="39.3939%" height="15" fill="rgb(61,175,175)" fg:x="20" fg:w="13"/><text x="60.8561%" y="479.50">alc::optimizer::LayoutOptimizer&lt;_,_,S&gt;::score_single_grams</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 3.03%)</title><rect x="96.9697%" y="453" width="3.0303%" height="15" fill="rgb(233,133,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="463.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 3.03%)</title><rect x="96.9697%" y="437" width="3.0303%" height="15" fill="rgb(206,106,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="447.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 3.03%)</title><rect x="96.9697%" y="421" width="3.0303%" height="15" fill="rgb(190,90,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="431.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 3.03%)</title><rect x="96.9697%" y="405" width="3.0303%" height="15" fill="rgb(198,98,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="415.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 3.03%)</title><rect x="96.9697%" y="389" width="3.0303%" height="15" fill="rgb(212,112,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="399.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 3.03%)</title><rect x="96.9697%" y="373" width="3.0303%" height="15" fill="rgb(231,131,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="383.50">all..</text></g><g><title>alloc::alloc::realloc (1 samples, 3.03%)</title><rect x="96.9697%" y="357" width="3.0303%" height="15" fill="rgb(196,96,0)" fg:x="32" fg:w="1"/><text x="97.2197%" y="367.50">all..</text></g><g><title>realloc (1 samples, 3.03%)</title><rect x="96.9697%" y="341" width="3.0303%" height="15" fill="rgb(215,215,64)" fg:x="32" fg:w="1"/><text x="97.2197%" y="351.50">rea..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="96.9697%" y="325" width="3.0303%" height="15" fill="rgb(212,212,63)" fg:x="32" fg:w="1"/><text x="97.2197%" y="335.50">[li..</text></g><g><title>[libc.so.6] (1 samples, 3.03%)</title><rect x="96.9697%" y="309" width="3.0303%" height="15" fill="rgb(226,226,68)" fg:x="32" fg:w="1"/><text x="97.2197%" y="319.50">[li..</text></g></svg></svg>